import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Download, Share2, Eye, Heart, MessageCircle, Share } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface RealSpecSheetProps {
  data: {
    videoUrl: string;
    creator: string;
    viralityScore: number;
    views?: string;
    likes?: string;
    comments?: string;
    shares?: string;
    topHashtags?: string[];
  };
}

export const RealSpecSheet = ({ data }: RealSpecSheetProps) => {
  const { toast } = useToast();

  const generateMarkdown = () => {
    return `# VIRALIFY Analysis Report

**Video URL:** ${data.videoUrl}  
**Creator:** ${data.creator}  
**Virality Score:** ${data.viralityScore}/100

## Engagement Metrics
- **Views:** ${data.views || 'N/A'}
- **Likes:** ${data.likes || 'N/A'}
- **Comments:** ${data.comments || 'N/A'}
- **Shares:** ${data.shares || 'N/A'}

## Hashtags
${data.topHashtags?.join(", ") || 'No hashtags detected'}

---
*Generated by VIRALIFY - TikTok Viral Analysis Tool*
`;
  };

  const handleDownload = () => {
    const markdown = generateMarkdown();
    const blob = new Blob([markdown], { type: "text/markdown" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `viralify-analysis-${Date.now()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Report Downloaded! ðŸŽ‰",
      description: "Your viral analysis has been saved",
    });
  };

  const handleShare = () => {
    const markdown = generateMarkdown();
    navigator.clipboard.writeText(markdown);
    
    toast({
      title: "Copied to Clipboard! ðŸ“‹",
      description: "Analysis report ready to paste",
    });
  };

  return (
    <Card className="p-6 bg-white/10 backdrop-blur-sm border-4 border-black rounded-[30px]">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-white"
            style={{
              WebkitTextStroke: "2px black",
              textStroke: "2px black",
              paintOrder: "stroke fill",
            }}>
          ANALYSIS REPORT
        </h2>
        <div className="flex gap-2">
          <Button
            onClick={handleShare}
            className="bg-purple-500 hover:bg-purple-600 border-3 border-black text-white font-bold rounded-xl text-sm"
          >
            <Share2 className="w-4 h-4 mr-1" />
            Share
          </Button>
          <Button
            onClick={handleDownload}
            className="bg-gradient-to-r from-[#FFAA00] to-[#FF6B00] hover:opacity-90 border-3 border-black text-white font-bold rounded-xl text-sm"
          >
            <Download className="w-4 h-4 mr-1" />
            Download
          </Button>
        </div>
      </div>

      <div className="space-y-4 text-white">
        <div>
          <p className="text-white/60 text-xs font-bold mb-1">VIDEO URL</p>
          <p className="font-mono text-sm break-all text-yellow-300">{data.videoUrl}</p>
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <p className="text-white/60 text-xs font-bold mb-1">CREATOR</p>
            <p className="font-bold text-lg">{data.creator}</p>
          </div>
          <div>
            <p className="text-white/60 text-xs font-bold mb-1">VIRALITY SCORE</p>
            <p className="text-4xl font-black text-yellow-300"
               style={{
                 WebkitTextStroke: "2px black",
                 textStroke: "2px black",
                 paintOrder: "stroke fill",
               }}>
              {data.viralityScore}%
            </p>
          </div>
        </div>

        {/* Engagement Metrics */}
        <div>
          <p className="text-white/60 text-xs font-bold mb-3">ENGAGEMENT METRICS</p>
          <div className="grid grid-cols-2 gap-3">
            <div className="bg-black/30 p-3 rounded-xl border-2 border-black flex items-center gap-2">
              <Eye className="w-5 h-5 text-cyan-400" />
              <div>
                <p className="text-xs text-white/60">Views</p>
                <p className="font-bold">{data.views || 'N/A'}</p>
              </div>
            </div>
            <div className="bg-black/30 p-3 rounded-xl border-2 border-black flex items-center gap-2">
              <Heart className="w-5 h-5 text-pink-400" />
              <div>
                <p className="text-xs text-white/60">Likes</p>
                <p className="font-bold">{data.likes || 'N/A'}</p>
              </div>
            </div>
            <div className="bg-black/30 p-3 rounded-xl border-2 border-black flex items-center gap-2">
              <MessageCircle className="w-5 h-5 text-yellow-400" />
              <div>
                <p className="text-xs text-white/60">Comments</p>
                <p className="font-bold">{data.comments || 'N/A'}</p>
              </div>
            </div>
            <div className="bg-black/30 p-3 rounded-xl border-2 border-black flex items-center gap-2">
              <Share className="w-5 h-5 text-purple-400" />
              <div>
                <p className="text-xs text-white/60">Shares</p>
                <p className="font-bold">{data.shares || 'N/A'}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Hashtags */}
        {data.topHashtags && data.topHashtags.length > 0 && (
          <div>
            <p className="text-white/60 text-xs font-bold mb-2">HASHTAGS USED</p>
            <div className="flex flex-wrap gap-2">
              {data.topHashtags.map((tag, i) => (
                <span
                  key={i}
                  className="px-3 py-1 bg-purple-500/30 border-2 border-black rounded-full text-xs font-bold"
                >
                  {tag}
                </span>
              ))}
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};
